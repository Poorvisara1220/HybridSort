#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

void insertionSort(vector<int>& arr, int low, int high) {
    for (int i = low + 1; i <= high; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= low && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

int medianOfThree(vector<int>& arr, int low, int high) {
    int mid = low + (high - low) / 2;
    if (arr[mid] < arr[low]) swap(arr[low], arr[mid]);
    if (arr[high] < arr[low]) swap(arr[low], arr[high]);
    if (arr[mid] < arr[high]) swap(arr[mid], arr[high]);
    return high;
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = medianOfThree(arr, low, high);
    swap(arr[pivot], arr[high]);
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= arr[high]) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void hybridSort(vector<int>& arr, int low, int high, int threshold = 10) {
    if (high - low <= threshold) {
        insertionSort(arr, low, high);
    } else {
        int pivot = partition(arr, low, high);
        hybridSort(arr, low, pivot - 1, threshold);
        hybridSort(arr, pivot + 1, high, threshold);
    }
}

int main() {
    vector<int> data = {24, 97, 40, 67, 88, 85, 15, 66, 53, 44, 26, 48, 16, 52, 45, 2, 64};
    cout << "Original Array: ";
    for (int num : data) cout << num << " ";
    
    hybridSort(data, 0, data.size() - 1);
    
    cout << "\nSorted Array: ";
    for (int num : data) cout << num << " ";
    return 0;
}
